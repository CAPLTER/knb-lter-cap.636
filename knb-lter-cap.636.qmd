---
title: "knb-lter-cap.636"
author: "CAP LTER Information Manager"
---

# micromet_data

```{r}
#| label: micromet-data
#| echo: FALSE
#| eval: TRUE
#| warning: TRUE

micromet_data <- DBI::dbGetQuery(
  pg, "
  SELECT
    events.timestamp,
    sites.site_code,
    -- events.site_id,
    events.replicate,
    variables.variablecode,
    observations.reading
  FROM micromet.events
  JOIN micromet.observations ON (observations.event_id = events.id)
  JOIN micromet.variables ON (variables.id = observations.variable_id)
  JOIN micromet.sites ON (sites.id = events.site_id)
  WHERE
    timestamp >= '2021-01-01'
  ;
  ")

micromet_data <- micromet_data |>
tidyr::pivot_wider(
  names_from  = variablecode,
  values_from = reading
) |>
dplyr::mutate(
  site_code = as.factor(site_code)
)

names(micromet_data) <- tolower(names(micromet_data))
```

# DT: micromet_data_2021_present

```{r}
#| label: micromet-data-2021-present
#| echo: FALSE
#| eval: TRUE
#| warning: TRUE

micromet_data_2021_present <- micromet_data |>
  dplyr::filter(timestamp >= "2021-01-01")

try({
  capeml::write_attributes(micromet_data_2021_present, overwrite = FALSE)
  capeml::write_factors(micromet_data_2021_present, overwrite = FALSE)
})

# capeml::update_attributes(micromet_data_2021_present)

# micromet_data_2021_present_desc <- "Micrometeorological data from the CAP LTER weather stations located at the Desert Botanical Garden and Lost Dutchman State Park, AZ, USA sites. Data are 10-min averages of measurements collected at 5-second intervals. Data collected 2021 through present."

# micromet_data_2021_present_DT <- capeml::create_dataTable(
#   dfname         = micromet_data_2021_present,
#   description    = micromet_data_2021_present_desc,
#   dateRangeField = "timestamp",
#   overwrite      = FALSE
# )
```


# DT: micromet_data_2006_2010

```{r}
#| label: micromet-data-2006-2010
#| eval: TRUE

micromet_data_2006_2010_DT <- capeml::harvest_dataTable("data_2006_2010/micromet_data_2006_2010_DT.xml")
```


# DT: micromet_data_2011_2020

```{r}
#| label: micromet-data-2011-2020
#| eval: TRUE

micromet_data_2011_2020_DT <- capeml::harvest_dataTable("data_2011_2020/micromet_data_2011_2020_DT.xml")
```


# OE: micromet_program_DBG

```{r}
#| label: micromet-program-DBG
#| eval: TRUE

micromet_program_DBG_desc       <- "data logger and sensor control program for Campbell data logger at the CAP LTER Desert Botanical Garden site"
micromet_program_DBG_additional <- "developed with Campbell Loggernet software"

micromet_program_DBG_OE <- capeml::create_otherEntity(
  target_file_or_directory = "tower_operation/CNDep_DBG_MetTower.CR1",
  description              = micromet_program_DBG_desc,
  additional_information   = micromet_program_DBG_additional
)

```

# OE: micromet_program_LDP

```{r}
#| label: micromet-program-LDP
#| eval: TRUE

micromet_program_LDP_desc       <- "data logger and sensor control program for Campbell data logger at the CAP LTER Lost Dutchman Park site"
micromet_program_LDP_additional <- "developed with Campbell Loggernet software"

micromet_program_LDP_OE <- capeml::create_otherEntity(
  target_file_or_directory = "tower_operation/CNDep_LDP_MetTower.CR1",
  description              = micromet_program_LDP_desc,
  additional_information   = micromet_program_LDP_additional
)

```

# DT: maintenance_log

```{r}
#| label: maintenance-log
#| eval: TRUE
#| error: TRUE

maintenance_log <- readr::read_csv("maintenance_log.csv") |>
  dplyr::rename(site_code = site) |>
  dplyr::mutate(site_code = as.factor(site_code))

# try({
#   capeml::write_attributes(maintenance_log, overwrite = FALSE)
#   capeml::write_factors(maintenance_log, overwrite = FALSE)
# })

# capeml::update_attributes(micromet_data_2021_present)

# maintenance_log_desc <- "log of maintenance activity, especially sensor calibration and replacement, at the CAP LTER micromet towers"

# maintenance_log_DT <- capeml::create_dataTable(
#   dfname         = maintenance_log,
#   description    = maintenance_log_desc,
#   dateRangeField = "date",
#   overwrite      = FALSE,
#   projectNaming  = TRUE
# )
```


# coverages

```{r}
#| label: coverages
#| eval: TRUE
#| error: TRUE

# LDP geographic

ldp_coords <- EML::eml$boundingCoordinates(
  westBoundingCoordinate  = "-111.4795",
  eastBoundingCoordinate  = "-111.4789",
  northBoundingCoordinate = "33.4626",
  southBoundingCoordinate = "33.4622"
)

ldp_geo <- EML::eml$geographicCoverage(
  geographicDescription = "CAP LTER site at Lost Dutchman State Park, AZ, USA",
  boundingCoordinates   = ldp_coords,
  id                    = "geographicCoverage.LDP"
)

# DGB geographic

dbg_coords <- EML::eml$boundingCoordinates(
  westBoundingCoordinate  = "-111.9476",
  eastBoundingCoordinate  = "-111.9415",
  northBoundingCoordinate = "33.4612",
  southBoundingCoordinate = "33.4554"
)

# geographic

dbg_geo <- EML::eml$geographicCoverage(
  geographicDescription = "CAP LTER site at the Desert Botanical Garden, AZ, USA",
  boundingCoordinates   = dbg_coords,
  id                    = "geographicCoverage.DBG"
)

# temporal

end_date <- as.character(as.Date(max(micromet_data$timestamp)))

tower_begin <- EML::eml$beginDate(calendarDate = "2006-05-10")
tower_end   <- EML::eml$endDate(calendarDate = end_date)

tower_range <- EML::eml$rangeOfDates(
  beginDate = tower_begin,
  endDate   = tower_end
)
tower_temporal <- EML::eml$temporalCoverage(rangeOfDates = tower_range)

# coverage
coverage <- EML::eml$coverage(
  geographicCoverage = list(
    ldp_geo,
    dbg_geo
    ),
  temporalCoverage = tower_temporal
)
```


# dataset

Optionally, provide: scope, abstract, methods, keywords, publication date.
Projects scopes include lter (default), gios, urex, ltreb, and som.

```{r}
#| label: construct-dataset
#| eval: TRUE
#| error: TRUE

dataset <- capeml::create_dataset()
```


# eml

```{r}
#| label: construct-eml
#| eval: TRUE
#| error: TRUE

eml <- capeml::create_eml()
```

```{r}
#| label: validate-eml
#| eval: TRUE
#| error: TRUE

EML::eml_validate(eml)
```

```{r}
#| label: eml-to-file
#| eval: TRUE
#| error: TRUE

capeml::write_cap_eml()
```


# file placement: data files

```{r}
#| label: upload-data-S3
#| eval: TRUE
#| error: TRUE

source("~/Documents/localSettings/aws.s3")
lapply(c("636_micromet_data_2021_present.csv", "636_maintenance_log.csv"), capeml::data_to_amz)
```


# EDI

## login

```{r}
#| label: edi-login
#| eval: TRUE
#| error: TRUE
  
source("~/Documents/localSettings/edi.R")
```

## package report (short)

```{r}
#| label: package report (short)
#| eval: TRUE
#| error: TRUE
  
capeml::get_package_evaluation(full_report = FALSE)
```

## package report (full)

```{r}
#| label: package report (full)
#| eval: FALSE
#| error: TRUE
  
report <- capeml::get_package_evaluation(full_report = TRUE)
xml2::write_xml(report, "/tmp/report.xml")
```

## update

```{r}
#| label: update
#| eval: TRUE
#| error: TRUE

capeml::create_package(
  environment = "staging",
  update      = TRUE
)
```


## logout

```{r}
#| label: edi-logout
#| eval: TRUE
#| error: TRUE

EDIutils::logout()
```


# post processing

remove data files (if desired)

```{r delete-data-files}

dataFilesToRemove <- dir(pattern = paste0(identifier, "_"))
file.remove(dataFilesToRemove)
```

XML/EML file to Amazon and cap-metadata

```{r delete-data-files}
capeml::eml_to_amz(list.files(pattern = "knb.+xml"))

file.copy(list.files(pattern = "knb.+xml"), "/home/srearl/localRepos/cap-metadata/cap-data-eml/")
file.remove(list.files(pattern = "knb.+xml"))
```
